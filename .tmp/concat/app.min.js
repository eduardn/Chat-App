/**
 * Created by bcojocariu on 11/3/2016.
 */
(function() {
    'use strict';

    angular.module('chatApp', ['ui.router','ui.bootstrap', 'firebase', 'ngStorage', 'ngEmoji', 'ngSanitize', 'ngScrollGlue'])
        .config(['$urlRouterProvider', '$stateProvider', function($urlRouterProvider, $stateProvider) {


            $urlRouterProvider.otherwise('/home');

            $stateProvider
                .state('home', {
                    url: '/home',
                    templateUrl: 'components/home/home.html',
                    controller: 'HomeController',
                    onEnter: ['loginService', '$state', function (loginService, $state) {
                        if (loginService.isLoggedIn()) {
                            console.log("From Home state: ", loginService.isLoggedIn());
                            $state.go('chat');
                        }
                    }]
                })
            .state('chat', {
                url: '/chat',
                onEnter: ['loginService', '$state', function (loginService, $state) {
                    if (!loginService.isLoggedIn()) {
                        $state.go('home');
                    }
                }],
                resolve: {
                    loggedUser:
                    //     ['$localStorage', function($localStorage) {
                    //     console.log("LocalStorage User: ", $localStorage.currentUser);
                    //     return $localStorage.currentUser;
                    //
                    // }]
                        ['loginService', function (loginService) {
                        console.log("State resolve: ", loginService.isLoggedIn());
                        var user = loginService.isLoggedIn();
                        return user;
                    }]
                },
                params:{
                    userKey: null
                },
                templateUrl: 'components/chat/chat.html',
                controller: 'ChatController'
            })

            .state('chat.room', {
                url: '/:roomName',
                params:{
                    userKey: null
                },
                templateUrl: 'components/chat-room/chat.room.html',
                controller: 'ChatRoomController'
            })
        }])

    .run(['$emoji', '$rootScope', function($emoji,$rootScope) {
        //$rootScope.config.hideRooms = false;
        $rootScope.config = {
            hideRooms: false
        };

        $emoji.setConfig({
            img_dir: 'http://hassankhan.github.io/emojify.js/images/emoji'
        })
    }]);

})();
/**
 * Created by bcojocariu on 11/3/2016.
 */
(function() {
    'use strict';

    angular.module('chatApp')
        .controller('HomeController', HomeController);

    HomeController.$inject = ['$scope', '$state', '$rootScope', '$stateParams', 'loginService', '$localStorage'];

    function HomeController($scope, $state, $rootScope, $stateParams, loginService, $localStorage) {
        $scope.fblogin = function(){
            loginService.fblogin().then(function () {
                $state.go('chat');
            });
        };

        $scope.githublogin = function() {
            loginService.githublogin().then(function() {
                $state.go('chat')
            })
        };


        var database = firebase.database();

        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        // $scope.$storage = $localStorage.$reset();
        $scope.username = "";
        $scope.usercolor = getRandomColor();
        console.log($scope.usercolor);

        $scope.myStyle = { 'color': getRandomColor() };
        $scope.login = function(username) {
            localStorage.setItem('userNameLogged', username);
            if (username) {
                $scope.$storage = $localStorage.$default({
                    loggedUsername: username,
                    usercolor: $scope.usercolor
                });
                //Save user to firebase
                var newUserKey = firebase.database().ref().child('users').push().key;
                //console.log(newUserKey);
                var updateUser = {};
                updateUser['/users/' + newUserKey] = username;
                firebase.database().ref().update(updateUser);
                $state.go('chat');
            } else {
                $scope.loginError = true;
            }

        };

        database.ref('/users').once('value').then(function(snap) {
            console.log(snap.val());
        });

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

    }

})();
(function() {
    'use strict';

    angular.module('chatApp')
        .controller('ChatController', ChatController)
        .directive('createRoom', function() {
            return {
                // controller: 'ChatController',
                templateUrl: 'components/directives/createRoom.html'
            };
        });



    ChatController.$inject = ['$scope', '$state', '$location', 'loggedUser', '$localStorage', '$stateParams', '$firebaseObject', '$timeout', '$rootScope', '$q', 'loginService'];


    function ChatController($scope, $state, $location, loggedUser, $localStorage, $stateParams, $firebaseObject, $timeout, $rootScope, $q, loginService) {

        var loggedUserKey = loggedUser.firebaseUserKey;
        console.log("loggedUser:", loggedUser);
         $scope.loggedUser = loggedUser;
         console.log(loggedUser);
        if(loggedUser == null){
        var loggedUserRef = firebase.database().ref('/users/' + loggedUserKey);
            loggedUserRef.on('value', function(snap){
                $scope.loggedUser = snap.val();
                console.log("Logged User", $scope.loggedUser)
            });
        }

        $rootScope.config.hideRooms = false;

        //$scope.hideRooms = $stateParams.hideRooms || false;
        console.log("First hide rooms: ", $scope.hideRooms);
        $scope.$storage = $localStorage.$default();
        $scope.userName = $scope.$storage.loggedUsername;
        // if (!$scope.loggedUser) {
        //     console.log("should redirect to login");
        //     $location.path('/home');
        // }
        //console.log("loggedUsername: ", $scope.userName);
        $scope.name = "";
        $scope.rooms = [];

        $scope.logout = function() {
            loginService.logout().then(function () {
                console.log(loginService);
                $state.go('home');
            });

            function githublogout() {
                firebase.auth().signOut().then(function () {
                    var userLoggedUserRef = firebase.database().ref('/users');
                    console.log(userLoggedUserRef);
                    userLoggedUserRef.child(loggedUserKey).remove();

                    var userRef = firebase.database().ref('/rooms/');
                    userRef.once('value', function (snap) {
                        var usersArray = snap.val();
                        console.log("usersArray: ", usersArray);
                        for (var ukey in usersArray) {
                            console.log("ukey: ", ukey);
                            for (var ukeyUser in usersArray[ukey].users) {
                                console.log("ukeyUser: ", ukeyUser);
                                if (ukeyUser == loggedUserKey) {
                                    firebase.database().ref('/rooms/' + ukey + '/users/' + ukeyUser).remove();
                                }
                            }
                        }
                    });

                    console.log("User logged out GitHub");
                    $state.go('home');
                }, function (error) {
                    // An error happened.
                });
            };

            $scope.runBoth = function () {
                fblogout();
                githublogout();
            }

        };

        // $scope.logout = function() {
        //     //$scope.$storage = $localStorage.$reset();
        //     var  userRef  = firebase.database().ref('/rooms/');
        //     userRef.once('value',  function(snap) {
        //         var usersArray = snap.val();
        //         for (var ukey in usersArray) {
        //             for (var ukeyUser in usersArray[ukey].users) {
        //                 console.log(usersArray[ukey].users[ukeyUser] +  ukeyUser);
        //                 if (usersArray[ukey].users[ukeyUser] == loggedUserKey) {
        //                     firebase.database().ref('/rooms/' + ukey + '/users/' + ukeyUser ).remove();
        //
        //                 }
        //             }
        //         }
        //     });
        //
        //     var userLoggedUserRef = firebase.database().ref('/users');
        //     console.log(userLoggedUserRef);
        //     userLoggedUserRef.child(loggedUserKey).remove();
        //     userLoggedUserRef.once('value', function(snap){
        //         var users = snap.val();
        //         console.log(users);
        //         console.log(loggedUserKey);
        //         for(var ukeyUser in users){
        //             if(ukeyUser == loggedUserKey){
        //                 console.log(ukeyUser, loggedUserKey);
        //                 firebase.database().ref('/users/'+ ukeyUser).remove();
        //                 $state.go('home');
        //             }
        //
        //         }
        //     });
        //
        //   //  localStorage.clear();
        //     $scope.fblogout();
        //     console.log("Logged out");
        // };





        /*
         *GAD team code
         *list rooms
         */
        var database = firebase.database();

        $scope.listRooms = function() {
            database.ref('/rooms').on('value', function(snap) {
                $scope.rooms = snap.val();
                console.log($scope.rooms);
                var roomNames = [];
                var roomImages = [];
                for (var key in $scope.rooms) {
                    roomNames.push($scope.rooms[key].roomName);
                    roomImages.push($scope.rooms[key].imageUrl)
                }
                $scope.roomsNames = [];
                $timeout(function() {
                    $scope.roomNames = roomNames;
                    $scope.roomImages = roomImages;
                }, 0);
                //$scope.hideRooms = $stateParams.hideRooms || false;
            });
        };

        /*
         *Call function to
         *list users
         */
        $scope.listRooms();
        console.log("hideRooms after listrooms: ",$scope.hideRooms);

        /*
         * https://firebase.google.com/docs/database/web/read-and-write
         * adding a new room to database
         * TO DO : RESOLVE WITH MESSAGES
         */
        $scope.imagesUrls = ['http://www.imarijuana.com/wp-content/uploads/2011/10/Romania-Marijuana-Laws.png',
            'http://pix.iemoji.com/images/emoji/apple/ios-9/256/christmas-tree.png',
            'http://icons.veryicon.com/png/Sport/Sport/Basketball.png',
            'http://pix.iemoji.com/images/emoji/apple/ios-9/256/beer-mug.png',
            'http://pix.iemoji.com/images/emoji/apple/ios-9/256/party-popper.png',
            'https://s-media-cache-ak0.pinimg.com/564x/36/92/52/36925231de3dea90fd0d3c8fd9510d74.jpg',
            'http://icons.iconarchive.com/icons/visualpharm/animals/256/Panda-icon.png',
            'http://www.iconarchive.com/download/i86393/atyourservice/service-categories/Makeup.ico'];

        $scope.saveRoomImage = function(imageUrl){
            console.log(imageUrl);
            $scope.roomImage = imageUrl;
        };

        $scope.writeRoomData = function(roomName) {
            var roomName = $scope.roomNameCreate;

            var messageObject = {
                sender: "RoomBot",
                senderPhotoURL: "https://avatars1.githubusercontent.com/u/6422482?v=3&s=400",
                text: "Welcome to this room!"
            };
            // Get a key for a new Post.
            var newPostKey = firebase.database().ref().child('rooms').child($scope.roomNameCreate).child('messageObj').push().key;
            // Write the new post's data simultaneously in the posts list and the user's post list.
            var updates = {};
            updates['/rooms/' + $scope.roomNameCreate + '/roomName'] = $scope.roomNameCreate;
            updates['/rooms/' + $scope.roomNameCreate + '/messageObj/' + newPostKey] = messageObject;
            updates['/rooms/' + $scope.roomNameCreate + '/creator'] = $scope.loggedUser.displayName;
            updates['/rooms/' + $scope.roomNameCreate + '/imageUrl'] = $scope.roomImage;


            /*
             *Call again function to
             *list rooms to refresh
             *interface
             */
            $scope.roomNameCreate = null;
            $scope.listRooms();
            return firebase.database().ref().update(updates);
        };

        /*
         *count users in a room
         *and return the number
         */
        $scope.getCount = function(users) {
            var i = 0;
            for (var p in users) {
                if (users.hasOwnProperty(p)) {
                    i++
                }
            }
            return i
        };

        $scope.checkUnique = function() {
            $scope.ok = false;

            //localStorage.setItem('lockJoin', false);
            var roomName = localStorage.getItem('roomJoined');
            //$scope.ok = false;
            console.log(roomName);
            var starCountRef = firebase.database().ref('rooms/' + roomName + '/users');
            starCountRef.on('value', function(snapshot) {
                $scope.ok = false;
                // console.log(snapshot.val());
                var roomUsers = snapshot.val();
                for (var counter in roomUsers) {
                    if ($scope.userName == roomUsers[counter]) {
                        $scope.ok = true;
                        //localStorage.setItem('lock.', true);
                    }
                }
                return $scope.ok;
                //return localStorage.getItem('lockJoin')
            });
            return $scope.ok;
            //return localStorage.getItem('lockJoin')
        };

        /*
         *Join a room as
         *user, from the available rooms
         */
        $scope.joinRoom = function(room) {
            $rootScope.config.hideRooms = true;
            localStorage.setItem('roomJoined', room);
            if ($scope.checkUnique()) {
                console.log('problem');
                $scope.userInRomm = true;
            } else {
                console.log('here');
                $scope.ok = false;
                $scope.userInRomm = false;

                //write user to room

                var updateUser = {};
                updateUser['/rooms/' + room + '/users/' + loggedUserKey] = $scope.loggedUser;
                firebase.database().ref().update(updateUser);

                console.log("When Join: ", $scope.hideRooms);
                $state.go('.room', { roomName: room });

            }

        };

    }
})();

(function() {
    'use strict';

    angular.module('chatApp')
        .controller('ChatRoomController', ChatRoomController);

    ChatRoomController.$inject = ['$scope', '$timeout', '$state', '$firebaseArray', '$firebaseObject', '$rootScope', '$q', '$stateParams', 'loggedUser','$uibModal'];

    function ChatRoomController($scope, $timeout, $state, $firebaseArray, $firebaseObject, $rootScope, $q, $stateParams, loggedUser, $uibModal) {
        $scope.room = $stateParams.roomName;
        $scope.loggedUserKey = loggedUser.firebaseUserKey;
        $scope.loggedUser = loggedUser;
        $rootScope.config.hideRooms = true;

        $scope.roomCreator = "";
        $scope.roomUsers = [];

        var usercolor = $scope.$storage.usercolor;

        $scope.myColorStyle = { 'color': usercolor };

        var database = firebase.database();

        //Get messages from room
        var messagesArray = [];
        var roomName = $scope.room;
        var messageRef = database.ref('/rooms/' + roomName + '/messageObj');

        messageRef.on('value', function(snap) {
            messagesArray = snap.val();
            var messages = [];

            for (var mkey in messagesArray) {
                messages.push(messagesArray[mkey]);
            }

            $timeout(function() {
                $scope.messages = messages;
            }, 1);
        });

        //Get userCreator
        var roomCreatorRef = database.ref('/rooms/' + roomName + '/creator');
        roomCreatorRef.once('value', function(snap){
            var roomCreator = snap.val();

            $timeout(function() {
                $scope.roomCreator = roomCreator;
            }, 1);

        });

        $scope.checkIfImg = function(mess) {
            return !(mess.indexOf('.jpg') == -1 && mess.indexOf('.jpeg') == -1 && mess.indexOf('.png') == -1)
            // pentru formatele https://youtube.com/watch?v=VUkUi260Sn8
        };

            $scope.checkIfYoutubelink = function(mess) {
                return !(mess.indexOf('youtube.com') == -1 && mess.indexOf('youtu.be') == -1 )
                // pentru formatele https://youtube.com/watch?v=VUkUi260Sn8
            };

            $scope.getYouTubeId = function(mess){
                if(mess.indexOf('youtube.com') != -1){
                    return mess.split('=')[1]

                }else{
                    return mess.split('youtu.be/')[1]
                }
            };


        $scope.sendMessage = function(messageText) {
            var date = new Date();
            console.log("Date: ", date);
            var momentDate = moment(date).format("hh:mm");
            console.log("Moment Date: ", momentDate);
            if (messageText) {
                $scope.messages = [];
                var messageObject = {
                    sender: $scope.loggedUser.displayName,
                    senderPhotoURL: $scope.loggedUser.photoURL,
                    text: messageText
                };
                // Get a key for a new Post.
                var newPostKey = firebase.database().ref().child('rooms').child($scope.room).child('messageObj').push().key;
                // Write the new post's data simultaneously in the posts list and the user's post list.
                var updates = {};
                updates['/rooms/' + $scope.room + '/messageObj/' + newPostKey] = messageObject;
                return firebase.database().ref().update(updates);

            }
        };

        //Users from Room
        var roomUsersArray;

        var roomUsersRef = firebase.database().ref('rooms/' + $scope.room + '/users/');
        roomUsersRef.orderByChild('uid').on('value', function(snap) {
            console.log(snap.val());
            roomUsersArray = snap.val();
            var roomusers = [];
            $scope.roomUsers = [];
            for (var key in roomUsersArray) {
                var rooomuser = roomUsersArray[key];
                roomusers.push(rooomuser);
            }

            $timeout(function() {
                $scope.roomUsers = roomusers;
            }, 1);

        });

        $scope.leaveRoom  =   function(user) {
            $rootScope.config.hideRooms = false;
            // $rootScope.$broadcast('toggleRooms', false);
            var  usersArray  = [];
            var  users  = [];
            var  userRef  = firebase.database().ref('/rooms/' + $scope.room + '/users');
            userRef.once('value',  function(snap) {
                usersArray = snap.val();
                console.log("leave room users: ", usersArray);
                for (var ukey in usersArray) {
                    console.log("my key: ", $scope.loggedUserKey)
                    console.log("current key: ", ukey);
                    console.log("user key: ", usersArray[ukey]);
                    if ($scope.loggedUser.uid == usersArray[ukey].uid) {

                        userRef.child(ukey).remove();
                        console.log(ukey + " Removed");
                        // var  otherRef = firebase.database().ref('/rooms/' + $scope.room + '/users/' + ukey).set(null);
                        /*otherRef.on('value',  function(snap) {
                            // console.log(snap.val());
                        });*/
                    }
                }
            });
            //localStorage.setItem('hidenList', false);
            $state.go('chat');
        };

        $scope.userDetails = function(user){
            console.log("User details: ", user);
            var modalInsance = $uibModal.open({
                ariaLabeledBy: 'User Details',
                ariaDescribedBy: 'Body',
                windowClass: 'app-modal-window',
                templateUrl: 'components/chat-room/user-details.html',
                controller: 'ModalInstanceCtrl',
                resolve: {
                    user: function(){
                        return user;
                    }
                }
            })
        };

         $scope.kick = function(user){
             console.log("kicked user: ", user);
            if($scope.loggedUser.displayName == $scope.roomCreator){
                $rootScope.$broadcast('kick', {user: user});
                var  usersArray  = [];
                var  users  = [];
                var  userRef  = firebase.database().ref('/rooms/' + $scope.room + '/users');
                userRef.once('value',  function(snap) {
                    usersArray = snap.val();
                    console.log("Users array: ", usersArray);
                    for (var ukey in usersArray) {
                        console.log("cheile ",ukey);
                        console.log("usersArray.userid: ", usersArray[ukey]);
                        console.log("usersArray[ukey].uid: ", usersArray[ukey].uid);
                        console.log("usersArray[ukey].displayName: ", usersArray[ukey].displayName);

                        console.log("user uid: YOLO ", user.uid, usersArray[ukey].uid);
                        if (usersArray[ukey].uid == user.uid) {
                            console.log("user uid: ", user.uid, usersArray[ukey].uid);
                            console.log(usersArray[ukey].displayName + " Removed");
                            userRef.child(ukey).remove();
                        }
                    }
                });
            }
        };

        var userKeysRef = firebase.database().ref('rooms/' + $scope.room + '/users/');
        userKeysRef.on('value', function(snap) {
            var userKeys = snap.val();
            console.log("Users", userKeys);
            var usersIDs = [];
            for(var ukey in userKeys){
                usersIDs.push(userKeys[ukey].uid);
            }
            console.log("userIDS: ", usersIDs, $scope.loggedUser.uid);
            if(usersIDs.indexOf($scope.loggedUser.uid) == -1){
                console.log("You have been disconnected");
                $state.go('chat');
            }
        });
    }
})();

(function() {
    'use strict';

    angular.module('chatApp')
        .service('loginService', ['$q', '$localStorage', loginService]);

    function loginService($q, $localStorage){
        var service = this;
        var provider = new firebase.auth.FacebookAuthProvider();
        var provider2 = new firebase.auth.GithubAuthProvider();

        provider.addScope('user_birthday');
        provider.addScope('user_photos');
        provider.addScope('user_about_me');
        provider.addScope('user_actions.books');
        provider.addScope('user_actions.music');
        provider.addScope('user_hometown');
        provider.addScope('user_location');

        provider.setCustomParameters({
            'display': 'popup'
        });

        service.currentUser = null;

        service.isLoggedIn = function () {
            var currentUser =  firebase.auth().currentUser && firebase.auth().currentUser.providerData[0];

            var usersLoggedUserRef = firebase.database().ref('/users');
            usersLoggedUserRef.once('value', function(snap) {
                var allusers = snap.val();
                for (var ukey in allusers) {
                    if (currentUser.uid == allusers[ukey].uid) {
                        currentUser.firebaseUserKey = ukey;
                    }
                }
            });
            console.log("isLogged User: ", currentUser);
            return currentUser
        };

        service.fblogin = function(){
            var deferred = $q.defer();

             firebase.auth().signInWithPopup(provider).then(function(result) {
                // The signed-in user info.
                var user = result.user.providerData[0];
                //Save user to firebase
                var newUserKey = firebase.database().ref().child('users').push().key;
                //console.log(newUserKey);
                var updateUser = {};
                user.firebaseUserKey = newUserKey;
                updateUser['/users/' + newUserKey] = user;
                service.currentUser = user;
                console.log("Login user: ", service.currentUser);
                $localStorage.currentUser = service.currentUser;

                firebase.database().ref().update(updateUser);
                deferred.resolve();
            }).catch(function(error) {
                // Handle Errors here.
                var errorCode = error.code;
                var errorMessage = error.message;
                // The email of the user's account used.
                var email = error.email;
                // The firebase.auth.AuthCredential type that was used.
                var credential = error.credential;
                // ...
            });

            return deferred.promise;
        };

        service.githublogin = function() {
            var deferred = $q.defer();

            firebase.auth().signInWithPopup(provider2).then(function(result) {
                // The signed-in user info.
                var user = result.user.providerData[0];
                console.log(result);
                //Save user to firebase
                var newUserKey = firebase.database().ref().child('users').push().key;
                //console.log(newUserKey);
                var updateUser = {};
                user.firebaseUserKey = newUserKey;
                updateUser['/users/' + newUserKey] = user;
                service.currentUser = user;
                console.log("Login user: ", service.currentUser);
                $localStorage.currentUser = service.currentUser;

                firebase.database().ref().update(updateUser);

                deferred.resolve();
            }).catch(function(error) {
                // Handle Errors here.
                var errorCode = error.code;
                var errorMessage = error.message;
                // The email of the user's account used.
                var email = error.email;
                // The firebase.auth.AuthCredential type that was used.
                var credential = error.credential;
                // ...
            });

            return deferred.promise;
        };

        service.logout = function() {
            var deferred = $q.defer();

            removeFromUsers()
                .then(removeFromRooms)
                .then(function(){
                    return firebase.auth().signOut()
                        .then(function() {
                            console.log("User logged out");
                            service.currentUser = null;
                            $localStorage.currentUser = null;

                            deferred.resolve();
                        }, function(error) {
                            console.log("An error happened")
                        });
                });
            return deferred.promise;
        };


        function removeFromUsers() {
            var deferred = $q.defer();

            var usersLoggedUserRef = firebase.database().ref('/users');
                usersLoggedUserRef.once('value', function(snap){
                    var allusers = snap.val();
                    console.log("All users: ", allusers);
                    for( var ukey in allusers){
                        console.log("All users key: ", allusers[ukey]);
                        console.log("Logout from users: ", service.currentUser);
                        if(service.currentUser.uid == allusers[ukey].uid){
                            console.log("user ID matched => remove from user: ", ukey, allusers[ukey].displayName)
                            // usersLoggedUserRef.child(ukey).remove();
                            usersLoggedUserRef.child(ukey).remove();
                        }
                    }
                deferred.resolve();
            });
            console.log(usersLoggedUserRef);

            return deferred.promise;
        }

        function removeFromRooms() {
            var deferred = $q.defer();
            var  userRef  = firebase.database().ref('/rooms/');
            userRef.once('value',  function(snap) {
                var usersArray = snap.val();
                console.log("usersArray: ", usersArray);
                for (var ukey in usersArray) {
                    // console.log("ukey: ", ukey);
                    // console.log("Logout from users: ", service.currentUser);
                    for (var ukeyUser in usersArray[ukey].users) {
                        // console.log("ukeyUser: ", ukeyUser);
                        if(service.currentUser.uid == usersArray[ukey].users[ukeyUser].uid){
                            // console.log("user ID matched => remove from rooms: ", ukey, usersArray[ukey].users[ukeyUser].displayName)
                            firebase.database().ref('/rooms/' + ukey + '/users/' + ukeyUser ).remove();
                        }
                    }
                }
                deferred.resolve();
            });
            return deferred.promise;
        }

    }
})();
angular.module('chatApp')
.controller('ModalInstanceCtrl', ModalInstanceCtrl);

ModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance', 'user'];

function ModalInstanceCtrl ($scope, $uibModalInstance, user){
    $scope.user = user;
    console.log("ModalInstanceController user: ", $scope.user.displayName);

    this.ok = function () {
        $uibModalInstance.close($scope.user);
    };

    this.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
};