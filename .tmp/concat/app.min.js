/**
 * Created by bcojocariu on 11/3/2016.
 */
(function() {
    'use strict';

    angular.module('chatApp', ['ui.router', 'firebase', 'ngStorage', 'ngEmoji', 'ngSanitize', 'ngScrollGlue'])
        .config(['$urlRouterProvider', '$stateProvider', function($urlRouterProvider, $stateProvider) {
            $urlRouterProvider.otherwise('/home');

            $stateProvider
                .state('home', {
                    url: '/home',
                    templateUrl: 'components/home/home.html',
                    controller: 'HomeController'
                })

            .state('chat', {
                url: '/chat',
                templateUrl: 'components/chat/chat.html',
                controller: 'ChatController'
            })

            .state('chat.room', {
                url: '/chat/:roomName',
                templateUrl: 'components/chat-room/chat.room.html',
                controller: 'ChatRoomController'
            })
        }])

    .run(['$emoji', function($emoji) {
        $emoji.setConfig({
            img_dir: 'http://hassankhan.github.io/emojify.js/images/emoji'
        })
    }]);
})();
/**
 * Created by bcojocariu on 11/3/2016.
 */
(function() {
    'use strict';

    angular.module('chatApp')
        .controller('HomeController', HomeController);

    HomeController.$inject = ['$scope', '$state', '$rootScope', '$stateParams', 'loginService', '$localStorage'];

    function HomeController($scope, $state, $rootScope, $stateParams, loginService, $localStorage) {



        $scope.addButton = function() {
            document.getElementById('$toggleProfile').addEventListener('click', function() {
                [].map.call(document.querySelectorAll('.profile'), function(el) {
                    el.classList.toggle('profile--open');
                });
            });
        }

        var database = firebase.database();

        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        $scope.$storage = $localStorage.$reset();
        $scope.username = "";
        $scope.usercolor = getRandomColor();
        console.log($scope.usercolor);

        $scope.myStyle = { 'color': getRandomColor() };
        $scope.login = function(username) {
            localStorage.setItem('userNameLogged', username);
            if (username) {
                $scope.$storage = $localStorage.$default({
                    loggedUsername: username,
                    usercolor: $scope.usercolor
                });
                //Save user to firebase
                var newUserKey = firebase.database().ref().child('users').push().key;
                //console.log(newUserKey);
                var updateUser = {};
                updateUser['/users/' + newUserKey] = username;
                firebase.database().ref().update(updateUser);
                $state.go('chat');
            } else {
                $scope.loginError = true;
            }

        };

        database.ref('/users').once('value').then(function(snap) {
            console.log(snap.val());
        });

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }



    }

})();
(function() {
    'use strict';

    angular.module('chatApp')
        .controller('ChatController', ChatController)
        .directive('createRoom', function() {
            return {
                // controller: 'ChatController',
                templateUrl: 'components/directives/createRoom.html'
            };
        });




    ChatController.$inject = ['$scope', '$state', '$location', 'loginService', '$localStorage', '$firebaseArray', '$firebaseObject', '$timeout', '$rootScope', '$q'];


    function ChatController($scope, $state, $location, loginService, $localStorage, $firebaseArray, $firebaseObject, $timeout, $rootScope, $q) {



        $scope.hideRooms = (localStorage.getItem('hidenList') === 'false');
        console.log($scope.hideRooms);
        $scope.$storage = $localStorage.$default();
        $scope.userName = $scope.$storage.loggedUsername;
        if (!$scope.userName) {
            console.log("should redirect to login");
            $location.path('/home');
        }
        //console.log("loggedUsername: ", $scope.userName);
        $scope.name = "";
        $scope.rooms = [];


        $scope.logout = function() {
            $scope.$storage = $localStorage.$reset();
            var  userRef  = firebase.database().ref('/rooms/');

            userRef.once('value',  function(snap) {
                var usersArray = snap.val();
                for (var ukey in usersArray) {
                    for (var ukeyUser in usersArray[ukey].users) {
                        console.log(usersArray[ukey].users[ukeyUser] + " ukeyUser");
                        console.log(localStorage.getItem('userNameLogged'));
                        if (usersArray[ukey].users[ukeyUser] === localStorage.getItem('userNameLogged')) {
                            //console.log(ukeyUser + ' tadaaaaaaaaaaaaaaa')
                            var remove = firebase.database().ref('/rooms/' + ukey + '/users/' + ukeyUser ).remove();

                        }
                    }
                }
            });



            var userLoggedUserRef = firebase.database().ref('/users/');
            userLoggedUserRef.once('value', function(snap){
                var users = snap.val();
                console.log(users);
                for(var ukeyUser in users){
                    if(users[ukeyUser]===$scope.userName){
                        console.log(users[ukeyUser] + " ukeyUser");
                        var removeUser = firebase.database().ref('/users/'+ ukeyUser).remove();
                    }

                }
            });

            localStorage.clear();
            console.log("Logged out");
            $state.go('home');
        };





        /*
         *GAD team code
         *list rooms
         */
        var database = firebase.database();

        $scope.listRooms = function() {
            database.ref('/rooms').on('value', function(snap) {
                $scope.rooms = snap.val();
                //console.log($scope.rooms);
                var roomNames = [];
                for (var key in $scope.rooms) {
                    roomNames.push($scope.rooms[key].roomName);
                }
                $scope.roomsNames = [];
                $timeout(function() {
                    $scope.roomNames = roomNames;
                }, 0);

            });
        };

        /*
         *Call function to
         *list users
         */
        $scope.listRooms();

        /*
         * https://firebase.google.com/docs/database/web/read-and-write
         * adding a new room to database
         * TO DO : RESOLVE WITH MESSAGES
         */
        $scope.writeRoomData = function(roomName) {
            var roomName = $scope.roomNameCreate;
            //console.log(roomName);
            var messageObject = {
                sender: "RoomBot",
                text: "Welcome to this room!"
            };
            // Get a key for a new Post.
            var newPostKey = firebase.database().ref().child('rooms').child($scope.roomNameCreate).child('messageObj').push().key;
            // Write the new post's data simultaneously in the posts list and the user's post list.
            var updates = {};
            updates['/rooms/' + $scope.roomNameCreate + '/roomName'] = $scope.roomNameCreate;
            updates['/rooms/' + $scope.roomNameCreate + '/messageObj/' + newPostKey] = messageObject;
            updates['/rooms/' + $scope.roomNameCreate + '/creator'] = $scope.userName;


            /*
             *Call again function to
             *list rooms to refresh
             *interface
             */
            $scope.roomNameCreate = null;
            $scope.listRooms();
            return firebase.database().ref().update(updates);
        }

        /*
         *count users in a room
         *and return the number
         */
        $scope.getCount = function(users) {
            var i = 0;
            for (var p in users) {
                if (users.hasOwnProperty(p)) {
                    i++
                }
            }
            return i
        };

        $scope.checkUnique = function() {
            $scope.ok = false;

            //localStorage.setItem('lockJoin', false);
            var roomName = localStorage.getItem('roomJoined');
            //$scope.ok = false;
            console.log(roomName);
            var starCountRef = firebase.database().ref('rooms/' + roomName + '/users');
            starCountRef.on('value', function(snapshot) {
                $scope.ok = false;
                // console.log(snapshot.val());
                var roomUsers = snapshot.val();
                for (var counter in roomUsers) {
                    if ($scope.userName == roomUsers[counter]) {
                        $scope.ok = true
                        //localStorage.setItem('lockJoin', true);
                    }
                }
                return $scope.ok;
                //return localStorage.getItem('lockJoin')
            });
            return $scope.ok;
            //return localStorage.getItem('lockJoin')
        };

        /*
         *Join a room as
         *user, from the available rooms
         */
        $scope.joinRoom = function(room) {
            //$scope.hideRooms = true;
            localStorage.setItem('hidenList', true);
            $scope.hideRooms = (localStorage.getItem('hidenList') === 'true');
            localStorage.setItem('roomJoined', room);
            if ($scope.checkUnique()) {
                console.log('problem');
                $scope.userInRomm = true;
                return;
            } else {
                console.log('here');
                $scope.ok = false;
                $scope.userInRomm = false;
                var newUserKey = firebase.database().ref('/users/').push().key;

                var updateUser = {};
                updateUser['/rooms/' + room + '/users/' + newUserKey] = $scope.userName;
                firebase.database().ref().update(updateUser);

                $state.go('chat.room', { roomName: room });
            };

        }


        /*  $scope.$on('toggleRooms', function(event, arg) {
         $scope.hideRooms = arg;
         });*/
    }
})();

(function() {
    'use strict';

    angular.module('chatApp')

    .directive('schrollBottom', function() {
            return {
                scope: {
                    schrollBottom: "="
                },
                link: function(scope, element) {
                    scope.$watchCollection('schrollBottom', function(newValue) {
                        if (newValue) {
                            $(element).scrollTop($(element)[0].scrollHeight);
                        }
                    });
                }
            }
        })
        .controller('ChatRoomController', ChatRoomController);

    ChatRoomController.$inject = ['$scope', '$timeout', '$state', '$firebaseArray', '$firebaseObject', '$rootScope', '$q', '$stateParams', 'loginService'];

    function ChatRoomController($scope, $timeout, $state, $firebaseArray, $firebaseObject, $rootScope, $q, $stateParams, loginService) {
        $scope.room = $stateParams.roomName;
        $scope.roomCreator = "";
        console.log($scope.room);
        $scope.roomUsers = [];
        
        $scope.loggedUsername = $scope.$storage.loggedUsername;

        var usercolor = $scope.$storage.usercolor;

        $scope.myColorStyle = { 'color': usercolor };

        var database = firebase.database();

        //Get messages from room
        var messagesArray = [];
        var roomName = $scope.room;
        var messageRef = database.ref('/rooms/' + roomName + '/messageObj');

        messageRef.on('value', function(snap) {
            messagesArray = snap.val();
            var messages = [];

            for (var mkey in messagesArray) {
                messages.push(messagesArray[mkey]);
            }

            $timeout(function() {
                $scope.messages = messages;
            }, 1);
        });

        //Get userCreator
        var roomCreatorRef = database.ref('/rooms/' + roomName + '/creator');
        roomCreatorRef.once('value', function(snap){
            var roomCreator = snap.val();

            $timeout(function() {
                $scope.roomCreator = roomCreator;
            }, 1);

        });

        $scope.sendMessage = function(messageText) {
            if (messageText) {
                $scope.messages = [];
                var messageObject = {
                    sender: $scope.userName,
                    text: messageText
                };
                // Get a key for a new Post.
                var newPostKey = firebase.database().ref().child('rooms').child($scope.room).child('messageObj').push().key;
                // Write the new post's data simultaneously in the posts list and the user's post list.
                var updates = {};
                updates['/rooms/' + $scope.room + '/messageObj/' + newPostKey] = messageObject;
                return firebase.database().ref().update(updates);

            }
        };

        //Users from Room
        var roomUsersArray;

        var roomUsersRef = firebase.database().ref('rooms/' + $scope.room + '/users/');
        roomUsersRef.on('value', function(snap) {
            roomUsersArray = snap.val();
            var roomusers = [];
            $scope.roomUsers = [];
            for (var key in roomUsersArray) {
                var rooomuser = roomUsersArray[key];
                roomusers.push(rooomuser);
            }

            $timeout(function() {
                $scope.roomUsers = roomusers;
            }, 1);

        });

        $scope.leaveRoom  =   function(user) {
            // $rootScope.$broadcast('toggleRooms', false);
            var  usersArray  = [];
            var  users  = [];
            var  userRef  = firebase.database().ref('/rooms/' + $scope.room + '/users');
            userRef.once('value',  function(snap) {
                usersArray = snap.val();
                //console.log(roomUsersArray);
                for (var ukey in usersArray) {
                    if (usersArray[ukey] === user) {
                        userRef.child(ukey).remove();
                        console.log(usersArray);
                        console.log(ukey + " Removed");
                        // var  otherRef = firebase.database().ref('/rooms/' + $scope.room + '/users/' + ukey).set(null);
                        /*otherRef.on('value',  function(snap) {
                            // console.log(snap.val());
                        });*/
                    }
                }
            });
            $state.go('chat', {} , { reload: true });
        }

         $scope.kick = function(user){
            if($scope.loggedUsername == $scope.roomCreator){
                $rootScope.$broadcast('kick',{user: user});
                var  usersArray  = [];
                var  users  = [];
                var  userRef  = firebase.database().ref('/rooms/' + $scope.room + '/users');
                userRef.once('value',  function(snap) {
                    usersArray = snap.val();
                    for (var ukey in usersArray) {
                        if (usersArray[ukey] === user) {
                            userRef.child(ukey).remove();
                            console.log(usersArray[ukey] + " Removed");
                        }
                    }
                });
            }
        };

        var userInRoom = firebase.database().ref('rooms/' + $scope.room + '/users/');
        userInRoom.on('value', function(snap) {
            roomUsersArray = snap.val();
            var roomusers = [];
            for (var key in roomUsersArray) {
                var rooomuser = roomUsersArray[key];
                roomusers.push(rooomuser);
            }
            if(roomusers.indexOf($scope.loggedUsername)== -1){
                console.log("You have been disconnected");
                $state.go('chat', {} , { reload: true });
            }
        });
    }
})();

(function() {
    'use strict';

    angular.module('chatApp')
        .service('loginService', loginService);

    function loginService(){
        var username = "";
        var hideRoomsFromChat = "";

        this.setUsername = function(loggedUsername){
            username = loggedUsername;
        };

        this.getUsername = function(){
            return username;
        };
    };

})();